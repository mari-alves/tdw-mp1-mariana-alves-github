# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

image: node:latest 

stages:          # List of stages for jobs, and their order of execution
  - install
  - build
  - test
  - deploy

install:
  stage: install
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/

build-job:      # This job runs in the build stage, which runs first.
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - out/

#unit-test-job:   # This job runs in the test stage.
  #stage: test    # It only starts when the job in the build stage completes successfully.
  #script:
    #- echo "Running unit tests... This will take about 60 seconds."
    #- sleep 60
   # - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - npm run lint
    - echo "No lint issues found."

prettier-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - npm run prettier
    - echo "Formated code yupi!"

jest-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - npm run test
    - echo "Testing code oh yeah!"

deploy: 
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH 
  script:
    - npx netlify-cli deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --prod


#deploy-job:      # This job runs in the deploy stage.
  #stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  #environment: production
  #script:
    #- echo "Deploying application..."
   # - echo "Application successfully deployed."
